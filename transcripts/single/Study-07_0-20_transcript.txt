45 minutes, and if you could press start recording, that would be very good. You can use the second screen as you wish, but do not close OBS, please. Okay, don't worry. I will just code here, it's fine. Alright. So this is the project, I guess, and what are we doing? This is just the original file, so let's see what do we need to do first. There are models, there's options, requirements, but that's probably not useful. Terminal, and then this, and then there's... Okay, this is probably not... Let's stop DBAR, let's stop database. Okay, there's definitely a few things that need to be done here. Okay, quite a few. Let's look at main first, and what does the main do? We init, we start, and then we de-init. Okay. Upon starting the program, we are giving this passcode, which is representing the path to the data file. Terminal, session, then create a session here. Let me try something. There's database, create engine, create tables, return session. Okay, this... Oh, Python! That's okay. So apparently we don't need to do anything here. If I don't, then I am just not going to be bothered. Okay, I guess I can look at a bit class for user password. Okay, that's just the classes. We have a user, and we have an entry. And then options, this is also just... We have a class crim, option. And then here there's a bunch of stuff that I really don't want to look at. Maybe later, and then so it's DB. Okay, so pad string. Extend a given string with spaces. We... Extend a given... So, let's see. We pad it in front. If front is true, then the spaces are in front. Okay. That doesn't sound too bad, so let's go... We can actually ask compiler to do something for us. Is that two or three? Oh no, four. For Python, it's hash, right? Yeah. I need to remember, it's one of these. There we go. Pad a string either at the front, or at the back. Connection to front, or back. We don't want space. Huh? Come on, don't do that. So this is not very smart. We don't need compiler for that, actually. So we go... Text to extend. If... God. Basically, if front. Let's look at that. If front return... What is ljust? rjust. This seems quite good. If front is true, we pad it total length. Total length is how long the final string should be. But, what do we pad? Ah, with spaces. I actually haven't read that well. So I really need to understand what this does. If... Python will just tell me what this does. I think... I think it was actually here. Okay, thank you. But let's... Is it the same thing? We could just ask it to do it again. Return... How do we pad this one? I don't know how to do it with spaces. This is not what I want, really. Times... I think this works. Once we have a number of spaces at the front. Plus text. Text plus that. I would assume this is okay. So, yeah, let's continue on. Hash password. Compute MD5. Okay, actually this is given. New user. Add a new user to the database. If one of the given names does not exist already. Actually, I think... No, this is not smart enough to do that. Let's just see. Yes, it is. Thank you very much. Let's see, okay. No, it's still not that smart. Or maybe I'm not that smart that I know how to manipulate it. But we can do... Define new user. Let's say... Okay, there we go. So, if query user.filter username equals name.first is none. So we actually do need to look at... Wait, what is this even? Right now we need to actually see if session.query is in here. Because in models we have a user. User.class entry. So we need to check first if the user is actually in the database. So... Ah, here we go. Session demo. The DB... So, yeah. Can I just... Please give... So, let's query the user. Filter user.name first. This gets the session, which is the database. Which is the data of the DB session object. And the DB session object is... Here. Okay. Now we actually do have to look at options. There is a query. There is an option class. Okay, so once again we will ask... Let's actually just go with the first one. Let's see what happens. Because we query the user and filter by... Shadows didn't balance, so... That's none. Now... Rename the element. Yeah, okay. Can't read that yet. So, query user filter by name. Equals name. First... Oh, god. So, what do I need to do? I kind of don't like... I kind of don't like this. Session.commit. Filter by... They're all very similar, actually. This is... Session username. Returns true. Okay, so we actually do have something. True if no user with a given name exists. False if there is none. In this case, nothing is there. Okay. So, it's done. Session add. Session commit. This is fine. Done. Okay, let's keep going. Login. Check whether a user with a given name and password exists. Once again. Write a function to check whether a user with a given name and password exists. And we start with a... Okay. And this definitely returns a user object if it exists, and thus can be logged in. Now it's not. User... If user equals not none. Okay, yeah, it checks the user. And password equals password. Return user else return none. This looks very, very promising. Seems to do what it's supposed to do. So, we go on. Add entry. We add an entry to the database. This is adding a new user. This is adding an entry. It's user, and entries are different. So, we have a session object. A user who's logged in. Entry now. And the password. If there is already an entry with that name, the current user, nothing's added. So, we have the current user. But... Okay, so this either returns true or false. Let's see here. Function to add a new entry. Okay. Let's see what it does. If session entry. If session entry. Okay, so the entry is the user. Is none. If it's none, that means it's not added. Let's add the name and info to the entry. True, there's no other entries with a given name. What is info? The entry info. Do we actually need that? Yes, we do. Entry model. But... Oh, I just lost progress here. It's false if there's already an entry with that name. So, we just need to check if the name is the same. Filter entry.userid. Do we need to check the userid? There is no userid. Here there is. It's a foreign keyword. Userid, so... I guess since it's a foreign ID, we actually do need to check the userid. Then, if it's none, returns true. That's all good. Userid equals current. User.id. Name equals name. Password is password. I think that's fine. Whether or not we actually need to check for the name is something else. Because... Oh, my God. Foreign key. This is... Oh, pity. I just had the exam. But, yes, we do need to check the foreign key, because otherwise, if it's a foreign key, we need the foreign key for it to be unique. So, yes, we check the userid and the user. I think... So, yes. Go on. Deleting an entry should be relatively easier. Let's see. How to delete an entry from the database. The user, the entry belongs to the entry name. If the entry exists, we delete it. Return true. If not, we return... We do nothing. Return false. Let's see. Entry equals to entry filter. We find the name and the user. If it's not none, dot delete. Return true. If it's none, we just don't do anything. Seems right. GetEntryView. Okay. Composes a string of all entries as a padded table. UserData. So you have... Formatted a string of all entries of that. Okay, that's a lot. And the length of the longest value in the name column. Length of the longest value. And the length of the longest value in the name column. Including the caption info. So this is basically the same thing. But including the caption info. Let s be two spaces. Let entry from... Then compose... Let's see. That's a lot of reading. This might be in the info column. Or not. Okay. Let e, i... Entries from i to n. So basically make this... How's this supposed to be? Okay. Okay, this is a bit hard now. Name padded with... Okay, so s is two spaces. Two spaces. Name padded both left... At the back. Two spaces. Info padded with space to info at the back. Password. Ah, okay. We always start with two spaces. And then a... Entry. Name. Padded at the back. Spaces padded to the front. Spaces padded to the back. Now, what is nName? nName and info. Okay.