Und bitte laut und deutlich reden. Ich versuche es. Bitteschön. Okay. Erstmal gucken, was wir hier für Dateien haben. Oder vielleicht erstmal die PDF öffnen. Oh Gott, ist das witzig. So, das darf ich jetzt aber bestimmt leise lesen, oder? Small password manager. You will find complete setup. I'm going to skeleton. Python. IDE Python. Blank functions. To-do comments. I may print anything into the console at any time. You can also use tools like SQLiteViewer. Das kenne ich eh nicht. For details informating particular functions. Control flow. Please refer to documentation. Own test. Writen. Mal sehen. Following features. On startup the user is prompted to either create a new account or log in with an existing one. A user who is logged in can view a list of their entries. Here only the name and the description of the entry are shown, but not the passwords themselves. View a particular entry in order to see the password. Add a new entry, edit and delete an entry. Several files. db.py contains all functions that interact with the database. Also können wir doch bestimmt mal gucken, wie das hier aussieht. Gehe mal auf. Update entry. Mehr oder weniger selbsterklärende Funktionen. Composes a string of all entries as a padded table. Die Ausgabe soll wahrscheinlich über Standardout funktionieren. Delete entry. Log in. Checks whether a user with a given name and password exists. Param session. The db.session object. The username and password. The user object. If the user exists, then this can be logged in. Okay, ich hab keine Ahnung von Datenbanken. Mal gucken, wie das wird. Aber CodePilot kann mir bestimmt helfen. New user. Okay. Sieht selbsterklärend aus. Main contains the entry point as well as the initialization code. Models contains the classes of the data model. As described in the paragraph above. Option contains code that capsulates some of the logic of terminal menu screens. Das klingt interessant. Terminal.py contains the actual control flow and user interaction in form of a state machine. Oh no. Design patterns. Oh Gott, hab ich sie vermisst. Wo würden wir reingucken? In AssumModels sind die... So, okay. Die UserClass und die EntryClass. Ist das die Class, die hier db sagt? Ah, hier ist schon eine. Können wir rausnehmen, bestimmt. Können mir CodePilot vielleicht auch gar nicht helfen. Ja, wo suche ich jetzt herum? Option.py. Das kann cryo-recapsule the menu screen where the user has to choose between different options. Okay, aber hier keine To-dos. Das ist schon mal schön. Dann brauche ich nur, um zu verstehen, was es tun soll. Terminal. Ähnlich. So, To-dos sind gelb. Da kann ich ja schnell hier durch die Gegend scrollen. Tests. Das sind wahrscheinlich Tests. Mal sehen. Was muss ich alles implementieren? Das, das, das, das, das, das. Der Main. Nichts. Models auch nichts. Vielleicht bin ich auch blind. Ich werde das bestimmt nachher ausführen können. Options. Auch nichts. Mal sehen. Vielleicht fände ich noch heraus, was das ist. Ansonsten ist es bestimmt auch nicht so schlimm. Okay. Das sieht aus, als müsste ich mit db.py all meine Arbeit machen. Dann mal zurück in die Description und weiterlesen. Ist das das, was ich hier kriege? New User. Packages. Interessant. Alchemy. Was ist wohl das einfachste? Neue User. Gut. Endschiff. Oh. Okay. Was? Die Links. Achso. Ja. Then compose the following table. Okay. Zuerst sollten wir wahrscheinlich hier mal n nehmen. nInfo anlegen. n-Name. Gleich. Nehme ich copilot nicht 0. Achso. Vielleicht doch. 0. Dann müssen wir über alle. Vielleicht kennt copilot sich mit den Klassen aus. Falsches Symbol. Ja. Gut. Schauen wir gleich vielleicht einmal nach. Jetzt Enter drücke. Schreibst du mir was vor? Ich schreibe mir natürlich nur den Command vor. Wäre ja auch langweilig, wenn nicht. Wir schauen mal was hier in der. Was? In der. Models.py. Entries. Ein Relationship. Was kann ein Relationship? I had a relationship between two mapped classes. Aber ich will doch wahrscheinlich über den Namen. Und das ist ein Column. Über ein Column kann man bestimmt drüber iterieren. Ich will the length of the longest value in the name column. Geh weg. Wie in. Nicht Entries. Wir wollen Name haben. Names. Wie auch immer. Name. Du checkst das. Vielen Dank copilot. Du hast so viel von dem Menschen gelernt. Der hier das Template erstellt hat. Und überall ToDoParsing geschrieben hat. Das ist Correct. Genau das will ich haben. Schön hätte ich es selber nicht ausdrücken können. Aber hier oben das wollen wir ändern. Und hier unten das gleiche. N. Info. N. Info. N. Info. N. Info. N. Info. N. Info. N. Korrekt. Ahh... Nein. Nicht ganz. Hier wollen wir natürlich auch den Name haben, oder? OK. Das hier wird wohl initialisiert mit der Länge von Eieiei. Sehr schön. Name. So. Gut. Dann hätten wir das schon mal erledigt. Let S be two spaces. Ah, das können wir auch mal anlegen, oder? S gleich two spaces. Ich bin fasziniert. With the entries from I to S, we have from I to then compose the following tables. Two spaces. Dann Name. Added with spaces to N. Added with spaces to N. Name at the back. Moment, was? Achso, und dann die Länge A. OK. Dann machen wir das doch erstmal. Geben wir das Ganze über die Komm... Ah, nein. Man will einen String haben. Dann, wie nennen wir unseren String? Erg. Das ist ein super bescheuerter Name, aber ich verwende ihn jedes Mal. So. Das ist bestimmt erstmal der leere String. Ah, nein. Wir können ihn gleich mal schon mal zusammensetzen. Mit S plus... Was tut L just? Es sieht schon ordentlich aus. Plus Passwort, plus N. So. Mal gucken, was L just tut. Return a left justified string of length with. Padding is done using the special fill character. Default is space. OK. Das ist also schon wieder genau das, was wir haben wollen. Sehr schön. So. Jetzt wollen wir die entries haben. Was genau sind die entries? Aha. Hier. Die entries sind in der User Base. Dann nehme ich... Ach, wie auch immer. In dem User Ding. Dann können wir die uns doch schon mal speichern. Dann ist Copilot auch weniger verwirrt. Wenn ich das hier jetzt einfach... Entnenne. Gleich. Ja. Genau so. Und dann wollen wir hier rüber iterieren. Genau. Und jetzt wollen wir hier... Ich kann schon nicht mal... Ich drücke jetzt einfach mal Tab um. Mal gucken, ob das richtig ist. S. Wir wollen zuerst... Ja. Wir wollen zuerst zwei Leerzeichen haben. Korrekt. Dann wollen wir den Namen haben. Rechtsjustified bis a name. Ja, ergibt soweit Sinn. Dann S. Dann e-Info mit auch rechtsjustified S. Dann 5 Sternchen padded with spaces to 8 at the front. Ah. Da heißt es, ich soll 3 Spaces davor machen. Verstehe ich das richtig? Lass mich gucken. Ah ja, weil Passwort 3 länger ist als... Ja, okay. Mhm. Ergibt Sinn. So. Das könnte es jetzt doch schon gewesen sein, oder? Das könnten wir doch gleich bestimmt testen. Return arc war. Genial. An einen Testpunkt db ist natürlich eine Datenbank. Korrekt. Das hatte ich ja schon offen nachsorten. Nein. Main. Was haben wir hier? init start d init Lustiger Name. Aber im Zweifelsfall haben die Software-Indexer bestimmt recht. Wo ist denn init? Bitte. Click. Initialize. Da soll ich, glaube ich, gar nicht hin. Start. Start kenne ich aber. Session ist gleich. Ich führe es einfach mal aus und gucke, was passiert. 2. Sekunde. Das war falsch. Ich habe hier einen Zweinamen. Create a new user. Wie heiße ich? Ich heiße... Darf ich mich hiermit de-anonymisieren? Ich heiße bestimmt Tim. Das ist anonym genug. Mein Passwort ist 1234. Enter. Error. User with name Tim already exists. Interessant. This is a Demo Passwort Manager. Na dann versuche ich doch mal, auf meinem eigenen Account einzuloggen. 1234. Verdammt. Aber das sieht auch soweit gut aus. Wir machen hier oben mal... Wo ist es? Was habe ich gerade implementiert? Ich kann hier einfach bestimmt... Test. Was für eine Funktion? GetEntryView. Ah. Dafür brauche ich jetzt ein blödes UserObject. Wo kriege ich das her? Na gut. Es wird schon funktionieren. Gleich, wenn ich alles zusammengebaut habe, hat mir meine liebe Sopra-Erfahrung gelehrt, dass das bestimmt funktioniert gleich. Okay. Wir haben das jetzt abgehakt. So. GetEntry. Get an entry from a user by name. The user that is currently logged in. Okay, das ist wieder so ein fancy UserObject. Name the entry name. Return the entry if it exists, else none. Okay. Dann... steigt Copilot mir schon was vor. Wahrscheinlich gar nichts, eigentlich, ne? Ich möchte... Badum, badum, badum. Muss ich über die drüber iterieren, oder kriege ich das irgendwie schneller hin? Äh... Im Zweifelsfall drüber iterieren. Äh... Oder ich frage Copilot. GetEntry... with... name. Return entry. Ah, schade, Schokolade. Vielleicht hätte ich da noch einmal Rechtsklick machen können, jetzt ist es aber... Auch egal, ich schaffe das ja auch selber. Oder? Was kann ich hier machen? Rechtsklick. Äh... Das war bestimmt falsch. Hier oben ist ein Copilot-Button, oder? Vor... Klingt das okay? Name. Ah, ja. Okay, das ist genau das, was ich haben will. Ich will... Ja, ich will den Ding zurückgeben. Ich will über sie drüber iterieren. Dann, wenn der Name des Entries gleich der übergebene Name ist, dann möchte ich E tatsächlich zurückgeben. Und sonst möchte ich Non zurückgeben. Sehr schön. Das hat aber schon das nächste Tutorial gelöst. Update-Entry. Session-Entry, Name, Info und Password. Update-Entry in the database. Session, the DB Session object. Okay, was auch immer das heißt, das finde ich bestimmt gleich raus. Entry, the Entry object to update. Okay, Name, the new Entry name, the new Entry info and the new Entry Password are. Jetzt muss ich nur noch herausfinden, was dieses Session-Objekt ist.