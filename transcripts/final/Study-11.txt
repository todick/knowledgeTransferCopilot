Night, you get to go.
Okay, let's get this to open the invitation.
Do you want to?
Yes.
10 or 7.
Let's put it here.
How do you make it big?
I think.
You just drag them to the top.
Per request that you will find, complete the additional ID that is going to project skeleton, okay?
Program ID is Python and ID you work with is PyCharm.
All the functions that are left blank, oh, okay, in the db.py.
You can also use tools like SQL Viewer, anything related to databases.
Push the first recommendation in the code, okay.
And you can check first.
It's probably just the docs.
You can call Python 3.
I forgot one thing.
Can you click here and click on disabled completions?
Thank you.
In order to do this, you can use, you can call main py.
Oh, okay.
Project description manager.
View list of all of their entries.
Here, only the name and the description.
And sort of the user is prompted to either create a new account or to log in an existing one.
A user who is logged in can view a list of their entries.
Here, only the name and description are shown, but not the password.
The entries meaning every time you log in, right?
Yeah.
View list of all, list of their entries.
Here, only the name and description of the entry.
I think so.
No, this is password manager.
I guess so because password for this website, this website, this website.
Ah, yeah, yeah, yeah.
So all the entries.
And the password itself.
View particular entry in order to see the password.
Add a new entry.
Edit.
Okay, yeah.
I don't know.
Files.
The project array comes with several files.
The program.
Contains all the functions on track with the database.
Initialization.
Models.UI.
Contains the classes of the data models as described in paragraph 4.
Contains the capsules.
Ah, that capsules some of the logic of the terminal ministries.
Terminal.
Contains the actual control flow.
And seed machine.
Wow.
Um.
Um.
Wait until it packages.
Click is used to pass command line parameters to the application.
SQL Alchemy.
Colorama.
Access useful helper functions.
That seems a lot.
Yeah, let's see.
What do we have in main create session?
I think we start with the data.
I think data is easier, right?
More simple.
But the thing that we need to implement, I think it's only on the db.py, right?
I don't think we need to implement the others, not even the main.
I think only the db.py.
Yeah, the todo is only on the db.py.
Extends a given string with spaces.
How long the final string?
Parameter front through.
So I'm not sure.
I mean, I can search on Google.
It takes to extend to total length.
Yeah.
We just need to add spaces at the back.
If it's false, yeah.
If the last parameter is false, we add them to the list.
I start searching for something and I start writing.
It's something colon len auto append strings in Python, I guess.
Text.
You can use plus equal.
Yeah, but we need to do this in a for loop that will work.
I think yes.
All right.
I mean, we should run it for X amount of time.
New text is equal to, oh, wait.
Text.
Then what we do is we start a for loop for I in range of zero to total length.
Minus text.length, I guess.
Why text.length?
So the total length also includes the length of the text and the white spaces.
Okay, okay.
So we append them.
Total length minus text.length.
No, it's length.
It's length of text.
And then we do a semicolon.
Wait, for loops in Python.
Wait, I forgot about that.
I have no idea.
I mean, I can check.
Wait, let's see here.
Python for loop.
Wait, no parameter total length.
So in range, I mean, it's.
Yeah, I just added the.
Yeah, that's right.
I forgot about that.
Python is simpler.
It's a hard language.
For I in range.
And then indentation.
Wait, but this is, what is going to be here, the thing.
So it's probably just text.
Total length minus length.
So suppose the total length is 10.
And our text is length 5.
So we need to add 5 more.
So this is going to give us 5 and this is going to run from 0 to 4.
So that's fine.
Because we want 5 text.
So we do new text.
White space.
Right?
Yes.
I guess we, no, do we return?
So we return the new text, I guess.
All right.
And then at the end, we just return new text.
But wait, so I don't know.
I think for completeness, what if the text already.
Wait, front, front.
We need to take account.
Ah, yes.
Then I guess an if.
I don't know if.
No, no, we can just make an if inside.
If it's front, then we append them in front.
So front plus new text.
Yeah, that's right.
You're right.
We can do it, we can do it.
Thanks.
If front.
Then we do.
New text equal.
If front is not true.
If not front, then we do what we did before, right?
Yeah, and then else.
Else we do.
New text.
New text equal.
Equal.
The empty space plus new text.
Yep.
Yes, I think.
I think you need the colon here.
Yes.
You're right.
Now the only thing I don't know is what if the text is already bigger than the total length.
So if the text is already 11 and the total length we want is 10.
That is something that is not specified.
I mean, that is just for the sake of completeness, I guess.
But I think we can just return the main text, right?
So we can make an if before, I guess.
If length of text is bigger than the total length.
Greater or equal.
Yeah, to the total length.
To total underscore length.
We just return the text or the new text.
Then just return text.
Let's leave it like that, whatever.
It looks good enough, I guess.
Let's write a comment here.
If length of text is greater than the needed new length.
Could be an edge.
I just write them because then you never know what you did over there.
Okay, this should be fine, whatever.
The hash password is fine.
Computes the empty hash of a given string.
Yes, so.
I know this has no to-do, so it's already done.
I think our colleague already done it.
Adds a new user to the database if one given with the name does not already exist.
Okay, this is if they want to create new.
The database session object, but then here we need the database session.
It's already given in here.
Yeah, but what are the, you know the.
I mean.
Where is the context of the functions?
Classes, models, user session.
How do we find the session?
No, I don't think it's out there.
How do we know what the session data object looks like?
I mean, they said we can use SQLite, I guess, for example, for that one.
But I don't know what for this.
Drop a file here.
That's hard.
I don't know how to find the.
How do we find.
I mean, we can check the main.
What is this requirements?
We can check either the main or the terminal, I guess, to check from where.
Okay, this one.
Create session.
They have create session path, and then did they use it?
Documentation.
Oh, wait.
I think in this they told us where the file is, what the file is.
Go down.
I think he said something on you can test the program using what run.
So go up maybe.
Yeah, this one.
So it's test.db, I guess.
So we can either check the test.db.
Apparently, you can call Python main32db in the terminal.
In the terminal.
So where is the location?
KT.study.
Python main32db.
No, this is like.
To test if our program works.
I just want to check what the file is, right?
So I think either we.
I don't know how we can.
Oh, I mean, this is the test.db.
Can you just try to drag it here?
I mean, try to open the SQLite website again.
This one.
Yeah.
You want to.
Yes.
Where is it?
There is a scope here.
Yeah.
Now we need to.
Yes.
Execute.
I just try to execute, I guess.
I don't know.
No, we have zero rows in our file currently.
So we have not.
Our database is empty.
Yeah, that makes total sense.
Wait.
What does the test.db even is?
Can we check the test.db?
Is this thing.
Oh.
It's basically, if I'm not mistaken, is the database.
Because look, it says entry zero rows.
So we have zero rows in our table, in our SQL table.
Oh, okay.
Wait.
So we got stuck here on the session thing because we wanted to see what a session object looks like.
But what are we supposed to do to the database?
Let's see.
Let's see.
PyCharm is smart.
I think so.
So what if we session.find.
I don't think it's that smart.
I think we disable that.
Yeah.
Session.
Copilot.
I mean, I don't think we can work on the, with the db session object.
Let me abort it.
Python.
No worries.
Just Google it.
I think it's simple.
Session object.
What is the SQL?
What are we using?
SQLite.
Oh, okay.
SQLite, I mean.
Sessions API.
Object name.
Session maker.
Okay, we have a session.
No, I mean, we can just see here.
Session.
Session maker.
Yeah, we receive.
How did they make the session here?
db.createEngine.
I mean, that's exactly what's happening here, right?
So engine.
Oh, no, they are making first the engine.
And then they're making the session with the engine.
Okay, I think that's.
And then they return the session.
Members.
Okay, here's what we want.
Members identity key.
Close all.
Begin call.
Method.
We just call the function.
In it.
No, we don't want in it.
Close all.
Close the session.
Configure.
Identity key.
This might be useful.
Return an identity key.
What if there is no identity key?
I think the user is the identity key in this case.
The user ID.
This is so complicated.
Can you open again the PDF?
So you have the identity ID.
We can try to use that for the user.
Okay, so you're saying here.
It's name, right?
So we say session.identity key.
I think we might need to import it first.
Do we already import them?
From phone tools.
I think we can just add another import, right?
Import.
Sql.
Alchemy.
That's definitely not the right one.
Import.
Import session.
Is it big?
Or lower case?
What if we just
Go forward.
SqlAlchemy.
It's on the Python.
But did they not give any example in the website?
Here is the documentation of SqlAlchemy.
Whatever.
Install SqlAlchemy.
How do I import?
Okay, import Sql.
just use that.
Okay, it's lowercase.
I should have thought about that.
Oh, it's there.
Yeah, we're here.
Maybe now if we do session dot
No, no, no, wait.
What if we import
Wait, what's happening?
It's not working.
No, it's because we don't use it.
Okay, then
I mean, do we need
I mean, we can just import the whole SQLAlchemy for now, right?
Yeah, I just wanted to
Yeah, but I think
How do we assign it to
SQLAlchemy dot
Session, I guess, or
How do we put it?
Alias
No, this is too big.
Can we check maybe an example they gave?
Where, where, where?
The first one, yeah.
SessionMaker by
Session, session, wait.
What is this?
ORM session, this is what we need.
Yeah, this is what we're working with.
Look, session members.
Yeah, this makes
Yeah, I don't know what we were looking at before.
I also not sure what
Parameters, autoflush, bind, binds, an optional engine connection, class, enable, future, info, transaction mode.
So, I suppose we should actually be able to use
Adding new or existing items, so we need this one.
Wait, but this is called from import session from SQLAlchemy dot ORM.
Is it?
I think so.
Look, look, look.
Here.
Class.
That is class.
Wait, maybe my syntax is wrong.
Import SQLAlchemy dot session.
Isn't
I thought that we already used the whole SQLAlchemy?
I mean, I don't know.
Now we're just importing this ORM.
Wait, we need add, but we need first to check if it exists.
Yes.
Query, query, query, query, probably.
Yeah, query.
We need query.
Where is the query?
Where are you?
Query, here.
Entities, return a query object corresponding to this session, not a query object.
Okay, but I don't know how to connect the session with the SQL.
I mean
What do you mean?
From this parameter.
I mean
Because we don't have any assumption for that parameter, right?
We assume that this is a session object, right?
So we can just directly use it?
That's
I have almost zero idea how this thing works in Python.
Yeah, because Python is not typed, remember.
So that's the thing the compiler never knows if I'm not mistaken.
Then I think we need to somehow
Return a new query object responding to the session, okay.
I mean, I can try to find
So, session, query.
Python, how to use imported library.
Query.
Wait, no, this is not what we want.
Import mat.
Wait, apparently we need to do a lot of things with session objects, so it's good that we spend time learning about sessions.
We could look at the other methods.
All of them have sessions, so let's learn about sessions.
And then
Session, session API.
I want the session documentation.
I think
Session basics, look.
Session basics.
What does session do?
In this one, they already create the engine, right?
We need to somehow
We first create a local, either engine or session, and assign the one they gave.
Then we can work on it, I think.
What do you mean, what do you mean, say again?
So we make a local variable of some engine
My syntax was wrong, yeah.
This is what I was trying to do.
Import session, so what happens if
If we do
Query commit info.
Wait, can we run this on main?
And then I just want to log something.
I want to log
So I think
Can we actually make the
Can we assign
This is a class name, right?
Yeah, that's the session.
Oh my god.
Where is the equal?
Oh, this is English layout.
Oh my god.
What layout do you use?
No, I mean, because it's German layout.
I don't know.
What are you trying to
No, because Python, no, Python, you don't use
This is Java, or Kotlin, or whatever.
Yeah, that's
No, no, Python is crazy.
Python is
Python is risky, but that's why it's good.
Yeah, you just
You're assigning that the compiler tells you, okay, this is of type session.
Okay, but now we work, but we don't know what functionality we can use.
We have query.
And we have only query.
Crazy.
Yeah, look, I gave it this, and this should return a query object, which is what I did here, basically.
I just did session.
Ah, okay, then we don't need
Yeah, but now let's inspect this query object.
No, this is not good.
Hash.
Hash.
Look, we need the hash.
Maybe.
Somewhere.
I don't know.
That was already done.
Oh, okay, that's actually all from the session class.
No, no, no.
Wait, opening
Basic of using a session.
Opening and closing.
Okay, we already have a session.
That's good.
Commit.
That's
We will do that later.
Session maker.
No.
Querying.
Here.
The primary means of querying is the use of select object, which returns session.execute, session.scale.
Can we use this select?
But this select says constructs to create a select object.
I mean, right now what we want to check is the user exists, right?
No, I mean the user exists in the test.
No, here.
Add a new user to the database if one with a given name does not exist already.
Yeah, I mean, so I thought
So the user is the name of the database.
We select the user and then we filter inside of them until we found the name that is given by this one.
Adding new or existing items.
Session.add.
No, but we need to check it first, right?
Adding new or existing item.
Yeah, but add should return
What if already exists?
Maybe add returns something?
I don't think so.
It will be duplicated.
No?
Returns none.
No.
So, okay.
Adding.
Checking.
There should be something for querying.
Flashing.
Get primary key.
No, no.
We just need to query.
Yeah, we query and then use
We filter first and then find if we actually
It's not empty?
With session statements.
Yeah, that one I don't know.
How do they get to that one?
Select.
Wait, where is the select?
Select is being called on user.
And user, what is user?
No, user is inside the models, I guess.
Wait, yeah.
I think it's the select.
Yeah, but with session, somehow they have the engine, right?
Do we even have the engine?
What do you mean we don't have the engine?
I don't know how to create this one.
Can we do that here?
I think that's just for creating the session object, right?
Then they do statement is equal to select, filter by name.
But the select is from
Ah, a select method is from SQLAlchemy.
And they do it on user, filter by name.
Query for individual columns.
That's a nice way.
So we just copy and paste and then we try it out.
No, we need to check here.
We import first, I guess.
Because the thing is I don't understand what is happening here.
Name should be equal to name.
Yes.
Yes.
Why is
No, I think red is just the name.
It's just equal, I guess.
No, this is not an error.
I think it's the ID.
I think.
That's what I want to believe.
Statement, query for user objects.
Wait, but this user, we don't have this thing.
No, no, no.
So it should be inside the sessions, I guess.
That's why they have this with session as a session, no?
Select a list of instances.
No, but how do we replicate the with session engine?
I think that's not necessary because
I think it too because I think the user and all the stuff is inside the session, no?
Or no?
The session has users.
Am I just plain dumb in this case?
Wait.
Because, look, they're adding to the session directly a user, right?
But the thing I don't understand is
How to access the database and filter from
No, how does the select method, what does it do?
I want to read what does the select method do.
It's just select the list of instances, I think, right?
Ah, it's an SQL state.
It's just an SQL from BD, I guess.
Wait.
Return and intersect, no.
Return and intersect all.
Entities to select from.
Table.
No, this is not good.
Yes, I agree, but
Wait, because they have columns.
Now we're talking about SQL tables.
At what point did we start to talk about SQL tables?
Maybe instead of user we have model.user or something?
We have, I think
We have the user here, right?
But this is the class.
Where do we even put all the information?
Column, look, they are now using column.
Okay, because ID
Here we're kind of the blueprint for the SQL base, right?
It's a primary key.
It's an integer, the type of the column that you need to have.
Okay, so ID is a column, name is a column, password is a column.
Entries is a relationship.
Yes.
Ah, okay.
And this is the entry object.
Okay, so we have a user that has a name.
So
We check first in the user, right?
Whether we have
Yeah, we need to query for user objects.
Where is this user actually come from?
Did they actually use the right user?
That's my question, because
But it doesn't throw an error, so I thought it's already
I think this is already an error.
Can you go to the user, just hover it?
Yes, it's already using the actual user that we want.
But
Query for user object.
So this is going to give us all users that have a certain name.
Yeah, and then
I guess if the
Statement, what is the
Select object.
So I guess, I thought that maybe, without this, we can just check.
If it's not empty, then we create, we session.add.
Otherwise, we
Ah, look, this is the select object.
That statement is what we return here.
This is an object with all of these properties, which we can add columns.
Why would you want
Well, wait, that doesn't make sense.
Why would you like to add columns to
No, it's just add another
What is it?
Field, like we want to add information to the users.
But that's not possible, because in SQL you will need to modify the whole table.
Yeah, but that's
I think that's what they do.
But here you only have filter by name.
Yeah, but then we will either have something or nothing, right?
But you have entries, right?
Right.
Column.
Add columns at
What do you
filter.
Fetch.
No, filter by
Okay, they are already in filter by.
What does filter by return?
Let's go to filter by.
What does it return?
Self.
It's self.
Okay, it doesn't modify the
It doesn't modify the
Apply the given filtering criteria as word clauses to select.
Okay, so now we have a list of users.
That have this name, right?
Yeah.
So now my question is, what is this statement?
Ah, here we see.
Select tuple of users.
Still a select.
Yeah, it's still a select.
Okay, so now we need to see if this is empty.
Yes.
Do they have something to check if it's empty?
Outer join, you were
Get
Exists.
Exists.
Do you think it should be exists?
Yeah, we can try.
Or
So, what do you mean exists?
So after, so select user exists name or
Statement, yeah.
I need to check if statement is empty.
Because if statement is empty, then we just add it and boom.
But let's
Do you see anything that says empty?
They should have something that says empty or
I mean, how
Offset, limit, lateral, label, subquery, suffix, select from, select subgroup, union all.
So I think this is a lot of things from database.
Group by
Yeah, this is all how to do
This is what we're doing is a SQL query, basically.
Yeah, but I don't know.
I forgot how to check if it's empty or not.
Can we just check the statement?
I don't think so.
I think I've never checked that on SQL.
How to check if it's
No, or yeah, did I?
Can we even check that?
So, if we use
Exists probably returns
No, exists
Wait, I forgot what exists did.
Returns and instruments.
No, this is not it.
Alias.
Do we have something to check the number of rows that we got here?
Lateral options, order by autojoin.
I think this
No, not this thing.
Exists.
A scalar.
What is a scalar?
I don't think we need a scalar.
Yeah, it's not even functional anymore.
I think we just leave it.
Wait, how do we check if it's empty?
I think we can do it.
We just check whether the statement is empty or not, I think, no?
Yeah, but how
I guess
Wait, what does that exist?
Maybe fetch?
I don't think fetch will do anything in this case.
Filter.
Return a new selectable criterion.
This is a numeric value.
Yeah, but we don't need either of those, you know?
Object.Session.Scalars.
List of
User objects, session.scalars.
Wait, now I'm under, okay, so they filter that thing and then they say scalars list.
Look, why are not we reading?
Look, list of user objects.
They are doing already for us.
This scalars all.
It's the list of the user subjects.
Yeah, okay, so this is of type.
I want to check the type of this thing.
Yes, maybe.
If it's a Python list, then we are done.
I mean, you can just check the all.
Query for individual columns.
This we don't need.
So can we say if len of user underscore object equals zero?
Equals zero, no, double.
Oh no, double this.
Oh, wait.
Oh my God.
Wait, wait, double, no, no, no, here.
Equals zero, session.add.
Session.add.
Session.add.
What is it?
User with password.
How do we name?
Equal name.
Now we need to give it an ID as well.
Password equal password and ID equal.
Ah, it's going to hash it.
Apparently.
We have some hash password for this one.
Wait, did they say what we hash for the ID?
Unique identifier for the database.
Unique identifier for the database.
ID.
Let's hash the name.
No, the password.
Let's hash the password.
Nope, doesn't like it.
Why is it ID?
I don't know.
Why do you even use ID there?
I put ID and it gave me that.
Because, no, sorry, ID equal ID.
I did that, look.
Okay, and then?
Build in.
I mean, we can just use that, right?
ID and with an empty.
I don't think we can use random.
Yeah, right, because we need to know it.
I think we just use ID with empty brackets.
Just like that?
Yeah, I think so.
Ah, yeah, you're right, you're right.
Now we still need entries of the object, and then entries this one.
But yeah, this function then is done.
Right?
If the list is empty, then we add a user.
Then we add a user.
If not, we don't do anything.
Yes, I think, wait, but don't we need to hash the password?
Wait, this is list of row objects.
No, that one is from earlier.
We can delete it, I think.
I think this one, we should hash them first with this one.
You're right.
Hash password.
Then call the password this.
I think this.
Nice, nice, nice.
Yeah, this doesn't like this.
All right, good.
Now we- Wait, do we need this?
No, but yeah, we don't need it.
You're right.
Okay, login.
What do we want to do with login?
Check whether a user and password exists.
Ah, okay, this is basically the same logic.
Right?
I think so.
Ah, and a password.
No, it changes a bit.
Oh, shit.
Wait, what happened?
Control Z.
Oh, cancel.
Wait, what?
I mean, we can just do this.
Oh, wrong one.
Yeah, yeah, yeah, yeah.
Look, okay, so here we have a list of objects.
If the length is zero, then we return.
What do we return?
The user object, else none.
Okay, return none because the user does not exist.
Otherwise-