45 minutes, and if you could press start recording, that would be very good.
You can use the second screen as you wish, but do not close OBS, please.
Okay, don't worry.
I will just code here, it's fine.
Alright.
So this is the project, I guess, and what are we doing?
This is just the original file, so let's see what do we need to do first.
There are models, there's options, requirements, but that's probably not useful.
Terminal, and then this, and then there's
Okay, this is probably not
Let's stop DBAR, let's stop database.
Okay, there's definitely a few things that need to be done here.
Okay, quite a few.
Let's look at main first, and what does the main do?
We init, we start, and then we de-init.
Upon starting the program, we are giving this passcode, which is representing the path to the data file.
Terminal, session, then create a session here.
Let me try something.
There's database, create engine, create tables, return session.
Okay, this
Oh, Python!
That's okay.
So apparently we don't need to do anything here.
If I don't, then I am just not going to be bothered.
Okay, I guess I can look at a bit class for user password.
Okay, that's just the classes.
We have a user, and we have an entry.
And then options, this is also just
We have a class crim, option.
And then here there's a bunch of stuff that I really don't want to look at.
Maybe later, and then so it's DB.
Okay, so pad string.
Extend a given string with spaces.
We
Extend a given
So, let's see.
We pad it in front.
If front is true, then the spaces are in front.
That doesn't sound too bad, so let's go
We can actually ask compiler to do something for us.
Is that two or three?
Oh no, four.
For Python, it's hash, right?
Yeah.
I need to remember, it's one of these.
There we go.
Pad a string either at the front, or at the back.
Connection to front, or back.
We don't want space.
Huh?
Come on, don't do that.
So this is not very smart.
We don't need compiler for that, actually.
So we go
Text to extend.
If
God.
Basically, if front.
Let's look at that.
If front return
What is ljust?
rjust.
This seems quite good.
If front is true, we pad it total length.
Total length is how long the final string should be.
But, what do we pad?
Ah, with spaces.
I actually haven't read that well.
So I really need to understand what this does.
If
Python will just tell me what this does.
I think
I think it was actually here.
Okay, thank you.
But let's
Is it the same thing?
We could just ask it to do it again.
Return
How do we pad this one?
I don't know how to do it with spaces.
This is not what I want, really.
Times
I think this works.
Once we have a number of spaces at the front.
Plus text.
Text plus that.
I would assume this is okay.
So, yeah, let's continue on.
Hash password.
Compute MD5.
Okay, actually this is given.
New user.
Add a new user to the database.
If one of the given names does not exist already.
Actually, I think
No, this is not smart enough to do that.
Let's just see.
Yes, it is.
Thank you very much.
Let's see, okay.
No, it's still not that smart.
Or maybe I'm not that smart that I know how to manipulate it.
But we can do
Define new user.
Let's say
Okay, there we go.
So, if query user.filter username equals name.first is none.
So we actually do need to look at
Wait, what is this even?
Right now we need to actually see if session.query is in here.
Because in models we have a user.
User.class entry.
So we need to check first if the user is actually in the database.
So
Ah, here we go.
Session demo.
The DB
So, yeah.
Can I just
Please give
So, let's query the user.
Filter user.name first.
This gets the session, which is the database.
Which is the data of the DB session object.
And the DB session object is
Here.
Now we actually do have to look at options.
There is a query.
There is an option class.
Okay, so once again we will ask
Let's actually just go with the first one.
Let's see what happens.
Because we query the user and filter by
Shadows didn't balance, so
That's none.
Now
Rename the element.
Yeah, okay.
Can't read that yet.
So, query user filter by name.
Equals name.
First
Oh, god.
So, what do I need to do?
I kind of don't like
I kind of don't like this.
Session.commit.
Filter by
They're all very similar, actually.
This is
Session username.
Returns true.
Okay, so we actually do have something.
True if no user with a given name exists.
False if there is none.
In this case, nothing is there.
So, it's done.
Session add.
Session commit.
This is fine.
Done.
Okay, let's keep going.
Login.
Check whether a user with a given name and password exists.
Once again.
Write a function to check whether a user with a given name and password exists.
And we start with a
And this definitely returns a user object if it exists, and thus can be logged in.
Now it's not.
User
If user equals not none.
Okay, yeah, it checks the user.
And password equals password.
Return user else return none.
This looks very, very promising.
Seems to do what it's supposed to do.
So, we go on.
Add entry.
We add an entry to the database.
This is adding a new user.
This is adding an entry.
It's user, and entries are different.
So, we have a session object.
A user who's logged in.
Entry now.
And the password.
If there is already an entry with that name, the current user, nothing's added.
So, we have the current user.
But
Okay, so this either returns true or false.
Let's see here.
Function to add a new entry.
Let's see what it does.
If session entry.
If session entry.
Okay, so the entry is the user.
Is none.
If it's none, that means it's not added.
Let's add the name and info to the entry.
True, there's no other entries with a given name.
What is info?
The entry info.
Do we actually need that?
Yes, we do.
Entry model.
But
Oh, I just lost progress here.
It's false if there's already an entry with that name.
So, we just need to check if the name is the same.
Filter entry.userid.
Do we need to check the userid?
There is no userid.
Here there is.
It's a foreign keyword.
Userid, so
I guess since it's a foreign ID, we actually do need to check the userid.
Then, if it's none, returns true.
That's all good.
Userid equals current.
User.id.
Name equals name.
Password is password.
I think that's fine.
Whether or not we actually need to check for the name is something else.
Because
Oh, my God.
Foreign key.
This is
Oh, pity.
I just had the exam.
But, yes, we do need to check the foreign key, because otherwise, if it's a foreign key, we need the foreign key for it to be unique.
So, yes, we check the userid and the user.
I think
So, yes.
Go on.
Deleting an entry should be relatively easier.
Let's see.
How to delete an entry from the database.
The user, the entry belongs to the entry name.
If the entry exists, we delete it.
Return true.
If not, we return
We do nothing.
Return false.
Let's see.
Entry equals to entry filter.
We find the name and the user.
If it's not none, dot delete.
Return true.
If it's none, we just don't do anything.
Seems right.
GetEntryView.
Composes a string of all entries as a padded table.
UserData.
So you have
Formatted a string of all entries of that.
Okay, that's a lot.
And the length of the longest value in the name column.
Length of the longest value.
And the length of the longest value in the name column.
Including the caption info.
So this is basically the same thing.
But including the caption info.
Let s be two spaces.
Let entry from
Then compose
Let's see.
That's a lot of reading.
This might be in the info column.
Or not.
Let e, i
Entries from i to n.
So basically make this
How's this supposed to be?
Okay, this is a bit hard now.
Name padded with
Okay, so s is two spaces.
Two spaces.
Name padded both left
At the back.
Two spaces.
Info padded with space to info at the back.
Password.
Ah, okay.
We always start with two spaces.
And then a
Entry.
Name.
Padded at the back.
Spaces padded to the front.
Spaces padded to the back.
Now, what is nName?
nName and info.
OK, OK, the longest value in the name column and the info column.
So I see.
So now, because we have this, OK, so padded width is 2.8 at the front.
Ah, I see.
I see, I see.
OK, this is going to be harder.
OK.
So here, we can say, find the length of the longest value in the name column.
And let's see if it's doing something.
And name equals to reduce lambda.
Oh, lambda function's great.
Max length, entry name for entry.
That looks nice.
Plus, plus, plus.
This is OK.
But I don't think it's correct, but I can use it.
OK, so for example, I don't need all of this.
Entries equals current session.
We don't have session.
Wait, do we only have the current user?
The user that is currently logged in.
Of all entries of that user.
OK, so we don't need this for now.
Maybe we can do current user dot.
Dot?
What am I doing?
Find the length of the longest value in the name column.
Column.
Actually, don't need this.
I kind of just want that.
But once again, we will ask for pilot.
Because we actually don't have the reference to the session.
So what is this?
Max.
We could just change this to four.
So for example.
Delete entry.
Is there one of these up here?
Not really.
Get an entry of a user by name.
Get entry of user.
But technically, this is max.
This should return the right thing.
But we actually don't have a list of entries right now.
We have a current user.
But that's not right.
OK, I'm really.
I'm really.
db.getEntryView.
I actually don't know how to proceed from here.
But that looks good.
Whoa.
Whoa.
But this is not good.
This is every shit.
string.
We pad name.
And we use padString.
And because it's using padString wrong.
It's because there are some where we go front.
And there are some where we don't go front.
And it's not using it correctly.
But it's actually a good starting point.
So let me just comment it out for now.
And then.
OK.
So we have our user.
Our user.name is a column of string.
User.
I don't know.
A user that is currently logged in.
We don't have a string.
But we have a user.
It's a table of users.
So I think I will not do this.
Because I think the others seem a bit easier.
So I'll just go down.
Get an entry from user.name.
The user that is currently logged in.
The entry name.
Treasure entry.
If it is, OK.
This seems doable.
I'm trying to get an entry from user.name.
And then let's go about it.
It's pretty short.
We'll just turn session.queryEntry.filterEntry.name equals name.
I don't think this works.
Get an entry from user.name.
Yeah.
OK.
So let me query.
Does it turn none if it doesn't get anything?
OK.
This is not what I want.
I'll use it as a table.
Use it as a class.
So we have ID, name, password, entries.
Entry.
Let's.
Oh my god.
This is just getting a bit confused.
Let's.
At least I'm sure this one will be easier.
I hope.
Let's try this one.
OK, that was an entry.
No, because we have a handle to this session.
Entry.
Update an entry.
OK.
Get the entry first.
It's not none.
But this is not returning true or false.
That's why it has entry name.
Name.
Entry.
Info.
It's info.
Entry.password is password.
But how do we actually get the entry?
So actually, this is the most likely, but I need to change it.
Session.updateNull.
Oh, cancel.
Cancel.
This is still not right.
Because this is definitely not right.
Entry equals to session.
Yes, we created that.
We filled out.
OK, same.
Ah, we actually just go get the entry to update.
We don't need this.
I think that's better.
OK.
That looks good.
Entry is not none.
Info.password.
Session add.
Is there even a session commit?
I guess.
It's a database file.
Oh, we did in the exams.
We do need to commit a transaction.
Let's just don't worry about that for now.
Update the info.
Update the password.
Update the name.
Yes.
I think this is OK.
Now we get entry back to this.
This should be something similar.
Gets an entry from a user by name.
Current user.
Entry name.
It's the same problem where we had, where there was no session commit.
Term session.
Path created error.
I guess we don't create that.
Source like this.
Get entry.
User has logged in.
Get an entry from a user by name.
Entry name.
What did it try to tell me?
Any other suggestions?
Nope.
Both of these require session, which we don't have.
Let's type something else.
Current user.
Let's look that up.
Current user.
It's either filter or .entries or filter.
Can you do that?
Does your user have entries?
Your user does have entries.
That seems a bit better.
Then
I see, I see.
I think I get it.
I understand a bit more what's going on.
So, let's
Let's actually just go back and look at everything we did before.
That's fine.
Let's check that.
If the user is none
Yeah, that's fine.
If the user
Okay, we have a session.
We'll carry it for the users in that session.
I will say username.
Username.
User.
Let me find the user.
Returned user.
Okay, that's fine.
By adding an entry, you go to entries.
Do you filter?
Because
This is already an entry, so entry name.
Entry ID.
If both of these exist, you return false.
But if there are no other entries, you add an entry, which is that.
An entry is
ID you don't need, but you need.
User ID, user.
User ID.
Don't you need user?
Oh, it's a relationship user.
Current user, user.
Current user.
Disappear.
Current
Positional argument.
Keyword argument.
But here, what are we supposed to return?
Backpopulates.
Oh, dear.
You basically have to look in here and get
What do you do here?
Let me just actually first take that away.
Session.add.
Session.add.
So I'm just going to assume that this is correct for now.
I want to finish, delete entry, entry filter, entry name, entry username, and ok, ok, back to this, current user, compose a list of entries Ok, so, current user, user.entries, yes, that's good Oops, that seems to be right, max of all this, and 4 Why does it need brackets here?
But it actually gave me
Ok, a list, because of max, it checks
Ok, fine I don't think that matters that much
Ah, that's why you have a plus sign there, because you added to the list And then, you just find the max of that in this list,
ok, we got those two done And then, instead of this, maybe we can call it string First we pad this, yes, that's the first line, but are we padding to the front or to the back?
So front equals true, when front equals true, we're padding it to the front
Ok, when front equals true, we're padding it to the front First we have two spaces, and then we are padding it at the back
So we can't have a handheld mouse here Ah, that's bad And then, two more spaces, info, pad it to the back Also false, pad does, but do that,
ok, that looks good, this is the first string And then, wait, just
That's fine
Text, total length,
yes, that looks fine
Ok, because we actually do need that I don't want to do this, but I want to look at what options
I have String with add, of course we can't do string with Two spaces, entry name, end name, and we are padding it at the front And you know what?
We can just actually edit this, because this, we know that this is true Add two spaces And info, true
This is at the front And two spaces I don't know if this works, I will assume that this works With spaces, but this is wrong 28, so
Let's just hardcode this Two spaces, that means 1, 2, 3 That looks alright